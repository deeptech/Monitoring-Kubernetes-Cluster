Introduction
Kind is another Kubernetes SIGs project but is quite different compared to minikube. It moves the cluster into Docker containers. This leads to a significantly faster startup speed compared to spawning VM.
kind is a tool(CLI) for running local Kubernetes clusters using Docker container “nodes”.
Let’s get started.
Prerequisite:
Following things should be available in the local system.
go (https://golang.org/)
docker — Service needs to be running(https://www.docker.com/)

Installation
Following command should download and install kind binary.
GO111MODULE=”on” go get sigs.k8s.io/kind@v0.8.1

Or

sudo yum update   … Ubuntu apt
sudo yum install -y golang … sudo apt install -y golang


https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html

curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
chmod +x ./kind
mv ./kind /for_k8s/kind

[ec2-user@ip-172-31-2-137 for_k8s]$ ./kind --version
kind version 0.11.1
Make sure kind binary is present
> kind version
kind v0.8.1 go1.14.2 darwin/amd64
Now we should be able to use kind CLI to spin up k8s cluster.
Usage of kind :
Usage:
  kind [command]Available Commands:
  build       Build one of [node-image]
  completion  Output shell completion code for the specified shell
  create      Creates one of [cluster]
  delete      Deletes one of [cluster]
  export      Exports one of [kubeconfig, logs]
  get         Gets one of [clusters, nodes, kubeconfig]
  help        Help about any command
  load        Loads images into nodes
  version     Prints the kind CLI version
Docker : 
sudo yum update –y  … sudo apt update
sudo amazon-linux-extras install docker
sudo yum install docker  .. sudo apt install docker.io
sudo service docker start
sudo usermod -a -G docker ec2-user

exit
sudo service docker start

docker info

or 
Ubuntu 
https://docs.docker.com/engine/install/ubuntu/
ubuntu@DESKTOP-4LKDUQI:~$ sudo usermod -aG docker ubuntu
[sudo] password for ubuntu:
ubuntu@DESKTOP-4LKDUQI:~$ sudo usermod -aG docker ubuntu
ubuntu@DESKTOP-4LKDUQI:~$ docker-machine start
docker-machine: command not found
ubuntu@DESKTOP-4LKDUQI:~$ sudo ls -la /var/run/docker.sock
srw-rw---- 1 root docker 0 Jul  6 12:26 /var/run/docker.sock
ubuntu@DESKTOP-4LKDUQI:~$ sudo chown ubuntu:docker /var/run/docker.sock
ubuntu@DESKTOP-4LKDUQI:~$ sudo ls -la /var/run/docker.sock
srw-rw---- 1 ubuntu docker 0 Jul  6 12:26 /var/run/docker.sock
ubuntu@DESKTOP-4LKDUQI:~$ sudo service docker status
 * Docker is not running
ubuntu@DESKTOP-4LKDUQI:~$ sudo service docker start
 * Starting Docker: docker                                                                                       [ OK ]
ubuntu@DESKTOP-4LKDUQI:~$ sudo service docker status
 * Docker is running

In this article we would be focusing predominantly on create , get , delete commands.
Create a cluster
To create a cluster just execute.
cmd: kind create cluster
> kind create cluster
Creating cluster "kind" ...
 ✓ Ensuring node image (kindest/node:v1.18.2) 🖼
 ✓ Preparing nodes 📦
 ✓ Writing configuration 📜
 ✓ Starting control-plane 🕹️
 ✓ Installing CNI 🔌
 ✓ Installing StorageClass 💾
Set kubectl context to "kind-kind"
You can now use your cluster with:kubectl cluster-info --context kind-kindHave a nice day! 👋
This will create kubernetes cluster by pulling latest kubernetes node (v1.18.2), So we have created kubernetes cluster of v1.18.2.
If we don’t pass --name argument while creating cluster, cluster name by default is set to kind
Create k8s cluster of specific version
We can pass --image argument to deploy k8s cluster of specific version.

echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
cmd: kind create cluster --image kindest/node:v1.15.6
> kind create cluster --image kindest/node:v1.15.6 --name kind-1.15.6
Creating cluster "kind" ...
 ✓ Ensuring node image (kindest/node:v1.15.6) 🖼
 ✓ Preparing nodes 📦
 ✓ Writing configuration 📜
 ✓ Starting control-plane 🕹️
 ✓ Installing CNI 🔌
 ✓ Installing StorageClass 💾
Set kubectl context to "kind-kind"
You can now use your cluster with:kubectl cluster-info --context kind-kindHave a nice day! 👋
All list of supported k8s version tags can be found here.
List out deployed clusters
cmd: kind get clusters
> kind get clusters
kind
kind-1.15.6
This should list two clusters created since we executed kind create cluster for two different k8s versions.
Install kubectl
https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
Set context for kubectl
After creating cluster kubectl would always point to the recent created k8s cluster.
Let’s check all available contexts.
> kubectl config get-contexts
CURRENT   NAME                               CLUSTER                      
          kind-kind                          kind-kind            
*         kind-kind-1.15.6                   kind-kind-1.15.6     
From the output we can conclude that kubectl context has currently been set to latest cluster i.e kind-1.15.6
“ context names are prefixed with kind
To set kubectl context to kind cluster(i.e latest v1.18.2) we would need to do
> kubectl config set-context kind-kind 
Context "kind-kind" modified.
To validate kubectl pointing to right cluster let’s check the nodes.
> kubectl get nodes
NAME                        STATUS   ROLES    AGE     VERSION
kind-1.18.2-control-plane   Ready    master   8m20s   v1.18.2
Delete a cluster
To delete a specific cluster, cluster name can be passed to delete command in --name argument.
cmd: kind delete cluster --name kind
> kind delete cluster --name kind
Deleting cluster "kind" ...
Delete all clusters
If we want to delete all clusters in single go, execute
cmd: kind delete clusters --all
> kind delete clusters --all
Deleted clusters: ["kind-1.15.6"]
Why kind?
•	kind supports multi-node (including HA) clusters
•	kind supports Linux, macOS and Windows
•	kind is a CNCF certified conformant Kubernetes installer
cd metrics-server
wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

kubectl get pods --namespace=monitoring
root@GGN000153118003:~/Monitoring-Kubernetes-Cluster/Prometheus-Grafana# kubectl get nodes --selector=kubernetes.io/role!=master -o jsonpath={.items[*].status.addresses[?\(@.type==\"InternalIP\"\)].address}
172.18.0.2root@GGN000153118003:~/Monitoring-Kubernetes-Cluster/Prometheus-Grafana# kubectl get pods --namespace=monitoring
NAME                                     READY   STATUS    RESTARTS   AGE
grafana-7f4d85b7c7-9trv2                 1/1     Running   0          17m
prometheus-deployment-599bbd9457-ddzgj   1/1     Running   0          17m
root@GGN000153118003:~/Monitoring-Kubernetes-Cluster/Prometheus-Gr

kubectl port-forward prometheus-deployment-599bbd9457-ddzgj 8080:9090 -n monitoring
